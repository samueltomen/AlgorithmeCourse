#LES BOUCLES
exemple
pour compteur de 1 à 4 pas de 1 faire
    avancer
finfaire

---------
algorithme exerciceBoucle1
debut 
    avancer
    tournerDroite
    avancer
    tournerGauche
    avancer
    tournerDroite
    avancer
    tournerGauche 
    avancer
fin 

version amelioré
debut
    pour chemin de 1 à 2 pas de 1 faire
        avancer
        TournerDroite
        avancer
        tournerGauche
    finfaire
    avancer
fin
----------
algorithme exerciceBoucle2
debut
    pour chemin de 1 à 3 pas de 1 faire
        avancer
        avancer
        avancer
        tournerGauche
    finfaire
fin

version amelioré
debut
    pour i de 1 à 3 pas de 1 faire
        pour j de 1 à 3 pas de 1 faire
            avancer
        finfaire
        tournerGauche
    finfaire
fin
----------
algorithme exerciceBoucle3
variable
    tableDe2:INTEGER
debut
    tableDe2 <- 0
    pour i de 1 à 10 pas de 1 faire
        tableDe2 <- i * 2
        afficher tableDe2
    finfaire
fin
----------

algorithme exerciceBoucle4
variable 
    resultat:integer
    nombre:integer
debut
    saisir nombre
    resultat <- 1
    pour i de 1 à nombre pas de 1 faire
        resultat <- resultat * i
    finfaire
    afficher resultat
fin

#Boucle tantQue 

#cours 
debut 
    tant que (noFlagObtains) faire
        avancer
    finfaire
fin

#exercice 

algorithme exericeTantQue1
debut
    pour i de 1 à 3 pas de 1 faire
        tant que (pasDeMur) faire
            avancer
        finfaire
        tournerGauche
    finfaire
fin

algorithme exericeTantQue2

variable
    nombre:integer
    resultat:integer

debut
    nombre <- 1
    resultat <- 1
    tant que (resultat < 1000) faire
        resultat <- nombre * resultat 
        nombre ++
    finfaire
    afficher resultat
fin

#TANTQUE 
//Dans cette exemple obligation d'initialiser la variable avec nombreUser <- 0
algorithme exerciceTantQue3
variables
    nombreUser:integer
debut
    nombreUser <- 0
    tant que (nombreUser < 5) faire
        saisir nombreUser
        afficher : "saisissez un nouveau nombre"
    finfaire
fin

#FAIRE TANTQUE 
// Dans cette exemple on peut demander la saisie sans avoir a initialisé la variable
Algorithme exerciceFaireTantQue
Variable
    nombreUser:integer
debut
    faire
        saisir nombreUser
    tant que nombreUser < 5
fin

algorithme exerciceAlgo1
variables

debut
    tournerGauche
    avancer
    pour i de 1 à 3 pas de 1 faire
        tournerGauche
        avancer
        tournerDroite
        avancer
        tournerDroite
        Avancer
    finfaire
    tournerGauche
    avancer
fin

algorithme exerciceAlgo2
variables
    score:INTEGER
    key:BOOLEAN
debut
    score <- 0
    key <- false
    tournerGauche
    pour i de 1 à 2 pas de 1 faire
        avancer
    finfaire
    pour i de 1 a 2 pas de 1 faire
        tournerGauche
    finfaire
    avancer
    tournerGauche
    si (key = true) alors
        afficher "Vous pouvez passer"
        avancer
    sinon
        afficher "Acces refuse"
    finsi
    pour i de 1 à 2 pas de 1 faire
        avancer 
        score<-score + 10
        tournerGauche
    finfaire
    tournerGauche
    pour i de 1 à 2 pas de 1 faire
        avancer  
    finfaire
    score <- score + 10 
    si (score >= 30 ) alors
        afficher "Vous pouvez passer"
        avancer
    sinon
        afficher "acces denied"   
        finfaire
    finsi
fin

algorithme exericeAlgo3
variable
    chiffre1:integer
    chiffre2:integer
    resultat:integer
debut
    saisir: chiffre1
    saisir: chiffre2
    resultat <- chiffre1 +chiffre2
    afficher resultat
fin

algorithme exericeAlgo4
variable
    chiffre1:integer
    chiffre2:integer
    resultat:integer
debut
    chiffre1 <- aleatoire(1,20)
    chiffre2 <- aleatoire (1,20)
    resultat <- chiffre1 - chiffre2
    afficher resultat
fin

algorithme exericeAlgo5
variables
nombreUser:integer
resultat:integer
debut
    saisr: nombreUser
    resultat <- 0
    pour i de 10 à 1 pas de -1 faire
        resultat <- nombreUser * i
        afficher resultat, "=", i, "*", nombreUser
    finfaire
fin

algorithme exericeAlgo6
variable
    nombreUser:integer
debut
    faire 
        afficher "Veuillez saisir un nombre entre 10 & 20"
        saisir: userNombre
        si (userNombre < 10) alors
            afficher "trop petit"
        sinonsi(userNombre > 20) alors
            afficher "trop grand"
        sinon
            afficher "Ok c'est good"
        finsi
    tant que userNombre < 10 || userNombre > 20
fin

algorithme exericeAlgo7
variable
    langage:integer
debut
    langage <- aleatoire(1,4) 
    selon langage
        cas 1 : afficher "Hello"
        cas 2 : afficher "Bonjour"
        cas 3 : afficher "Hola"
        cas 4 : afficher "Halo"
        autrement: afficher "je n'ai pas compris"
    finselon
fin

algorithme exericeAlgo8
variable
    etoile:string
debut
    etoile <- "*"
    tant que (NON finDeFichier) faire
        afficher <- etoile
    finfaire
fin

algorithme exericeAlgo9
variable
    n:integer
    resultat:integer
debut
    n <- aleatoire (1,20)
    resultat <- 0
    pour i de 1 à n pas de 1 faire
        resultat <- resultat + i
    finfaire
        afficher: "le resultat est : ", resultat
fin

algorithme exericeAlgo10
variable
    tirets:string
    nombreUser:integer
debut
    saisir nombreUser
    tirets <- "---------"
    pour i de 0 à nombreUser pas de 1 faire
        afficher tirets
    finfaire
fin

------------------------------- LES FONCTIONS -----------------------------

#cours

synthax 
algorithme coursAlgo1
debut 

fonction test
debut
    avancer
    tournerGauche 
    score <- score +1 
fin

test // declencher utilisation de la fonction

fin

#exercice

algorithme exericeAlgo1
debut

fonction bloc1
    debut
    avancer
    tournerGauche
    pour i de 1 à 2 pas de 1 faire
        avancer
        tournerDroite
    finfaire
    avancer
    tournerGauche
    fin
tant que (pasDrapeau) faire
    bloc1
finfaire
fin

algorithme exerciceFonction1
variable
welcome:string
debut

fonction addPseudo (pseudo)
    debut
        welcome <- "bonjour", pseudo
        afficher welcome
        // afficher "bonjour", pseudo
    fin
addPseudo ("charlie")
fin

algorithme exerciceFonction2

fonction pairOrNot (nombre)
    debut
        si (nombre mod 2 = 0) alors
            afficher "le nombre est pair"
        sinon
            afficher "le nombre n'est pas pair"
        finsi    
fin

fonction moyenneDe3 (nombre1,nombre2,nombre3)
variable
    resultat:integer 
debut
    resultat <- nombre1 + nombre2 + nombre3
    resultat <- resultat/3
    afficher resultat 
fin

//Premiere
fonction verificationID (age , sexe)
    debut
        si (age < 18 )alors
            afficher "trop jeune"
            si (sexe = true )alors
                afficher "Homme"
            sinon 
                afficher "Femme"
        sinon
            si (age > 30 )
                afficher "trop vieux"
                si (sexe = true )alors
                afficher "Homme"
            sinon 
                afficher "Femme"
        sinon
            afficher "Tu peux entrer" , sexe
        finsi
    fin

//Deuxieme
fonction verificationID2 (age, sexe)
debut
    si(age < 18 )
        afficher "trop jeune"
    sinonsi
        afficher "trop vieux"
    finsi
    si (sexe)
        afficher "homme"
    sinonsi 
        afficher "femme"
    finsi
fin

fonction divisiblePar5 (nombre)
    debut
        si (nombre mod 5 = 0 )alors
            retourner true
        sinon
            retourner false
    fin

algorithme main
variable
nombre:integer
debut
    saisir nombre 
    si divisiblePar5 (nombre) alors
        afficher " ce nombre est divible par 5"
    finsi
fin