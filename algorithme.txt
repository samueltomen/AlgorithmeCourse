#LES BOUCLES
exemple
pour compteur de 1 à 4 pas de 1 faire
    avancer
finfaire

---------
algorithme exerciceBoucle1
debut 
    avancer
    tournerDroite
    avancer
    tournerGauche
    avancer
    tournerDroite
    avancer
    tournerGauche 
    avancer
fin 

version amelioré
debut
    pour chemin de 1 à 2 pas de 1 faire
        avancer
        TournerDroite
        avancer
        tournerGauche
    finfaire
    avancer
fin
----------
algorithme exerciceBoucle2
debut
    pour chemin de 1 à 3 pas de 1 faire
        avancer
        avancer
        avancer
        tournerGauche
    finfaire
fin

version amelioré
debut
    pour i de 1 à 3 pas de 1 faire
        pour j de 1 à 3 pas de 1 faire
            avancer
        finfaire
        tournerGauche
    finfaire
fin
----------
algorithme exerciceBoucle3
variable
    tableDe2:INTEGER
debut
    tableDe2 <- 0
    pour i de 1 à 10 pas de 1 faire
        tableDe2 <- i * 2
        afficher tableDe2
    finfaire
fin
----------

algorithme exerciceBoucle4
variable 
    resultat:integer
    nombre:integer
debut
    saisir nombre
    resultat <- 1
    pour i de 1 à nombre pas de 1 faire
        resultat <- resultat * i
    finfaire
    afficher resultat
fin

#Boucle tantQue 

#cours 
debut 
    tant que (noFlagObtains) faire
        avancer
    finfaire
fin

#exercice 

algorithme exericeTantQue1
debut
    pour i de 1 à 3 pas de 1 faire
        tant que (pasDeMur) faire
            avancer
        finfaire
        tournerGauche
    finfaire
fin

algorithme exericeTantQue2

variable
    nombre:integer
    resultat:integer

debut
    nombre <- 1
    resultat <- 1
    tant que (resultat < 1000) faire
        resultat <- nombre * resultat 
        nombre ++
    finfaire
    afficher resultat
fin

#TANTQUE 
//Dans cette exemple obligation d'initialiser la variable avec nombreUser <- 0
algorithme exerciceTantQue3
variables
    nombreUser:integer
debut
    nombreUser <- 0
    tant que (nombreUser < 5) faire
        saisir nombreUser
        afficher : "saisissez un nouveau nombre"
    finfaire
fin

#FAIRE TANTQUE 
// Dans cette exemple on peut demander la saisie sans avoir a initialisé la variable
Algorithme exerciceFaireTantQue
Variable
    nombreUser:integer
debut
    faire
        saisir nombreUser
    tant que nombreUser < 5
fin

algorithme exerciceAlgo1
variables

debut
    tournerGauche
    avancer
    pour i de 1 à 3 pas de 1 faire
        tournerGauche
        avancer
        tournerDroite
        avancer
        tournerDroite
        Avancer
    finfaire
    tournerGauche
    avancer
fin

algorithme exerciceAlgo2
variables
    score:INTEGER
    key:BOOLEAN
debut
    score <- 0
    key <- false
    tournerGauche
    pour i de 1 à 2 pas de 1 faire
        avancer
    finfaire
    pour i de 1 a 2 pas de 1 faire
        tournerGauche
    finfaire
    avancer
    tournerGauche
    si (key = true) alors
        afficher "Vous pouvez passer"
        avancer
    sinon
        afficher "Acces refuse"
    finsi
    pour i de 1 à 2 pas de 1 faire
        avancer 
        score<-score + 10
        tournerGauche
    finfaire
    tournerGauche
    pour i de 1 à 2 pas de 1 faire
        avancer  
    finfaire
    score <- score + 10 
    si (score >= 30 ) alors
        afficher "Vous pouvez passer"
        avancer
    sinon
        afficher "acces denied"   
        finfaire
    finsi
fin

algorithme exericeAlgo3
variable
    chiffre1:integer
    chiffre2:integer
    resultat:integer
debut
    saisir: chiffre1
    saisir: chiffre2
    resultat <- chiffre1 +chiffre2
    afficher resultat
fin

algorithme exericeAlgo4
variable
    chiffre1:integer
    chiffre2:integer
    resultat:integer
debut
    chiffre1 <- aleatoire(1,20)
    chiffre2 <- aleatoire (1,20)
    resultat <- chiffre1 - chiffre2
    afficher resultat
fin

algorithme exericeAlgo5
variables
nombreUser:integer
resultat:integer
debut
    saisr: nombreUser
    resultat <- 0
    pour i de 10 à 1 pas de -1 faire
        resultat <- nombreUser * i
        afficher resultat, "=", i, "*", nombreUser
    finfaire
fin

algorithme exericeAlgo6
variable
    nombreUser:integer
debut
    faire 
        afficher "Veuillez saisir un nombre entre 10 & 20"
        saisir: userNombre
        si (userNombre < 10) alors
            afficher "trop petit"
        sinonsi(userNombre > 20) alors
            afficher "trop grand"
        sinon
            afficher "Ok c'est good"
        finsi
    tant que userNombre < 10 || userNombre > 20
fin

algorithme exericeAlgo7
variable
    langage:integer
debut
    langage <- aleatoire(1,4) 
    selon langage
        cas 1 : afficher "Hello"
        cas 2 : afficher "Bonjour"
        cas 3 : afficher "Hola"
        cas 4 : afficher "Halo"
        autrement: afficher "je n'ai pas compris"
    finselon
fin

algorithme exericeAlgo8
variable
    etoile:string
debut
    etoile <- "*"
    tant que (NON finDeFichier) faire
        afficher <- etoile
    finfaire
fin

algorithme exericeAlgo9
variable
    n:integer
    resultat:integer
debut
    n <- aleatoire (1,20)
    resultat <- 0
    pour i de 1 à n pas de 1 faire
        resultat <- resultat + i
    finfaire
        afficher: "le resultat est : ", resultat
fin

algorithme exericeAlgo10
variable
    tirets:string
    nombreUser:integer
debut
    saisir nombreUser
    tirets <- "---------"
    pour i de 0 à nombreUser pas de 1 faire
        afficher tirets
    finfaire
fin

------------------------------- LES FONCTIONS -----------------------------

#cours

synthax 
algorithme coursAlgo1
debut 

fonction test
debut
    avancer
    tournerGauche 
    score <- score +1 
fin

test // declencher utilisation de la fonction

fin

#exercice

algorithme exericeAlgo1
debut

fonction bloc1
    debut
    avancer
    tournerGauche
    pour i de 1 à 2 pas de 1 faire
        avancer
        tournerDroite
    finfaire
    avancer
    tournerGauche
    fin
tant que (pasDrapeau) faire
    bloc1
finfaire
fin

algorithme exerciceFonction1
variable
welcome:string
debut

fonction addPseudo (pseudo)
    debut
        welcome <- "bonjour", pseudo
        afficher welcome
        // afficher "bonjour", pseudo
    fin
addPseudo ("charlie")
fin

algorithme exerciceFonction2

fonction pairOrNot (nombre)
    debut
        si (nombre mod 2 = 0) alors
            afficher "le nombre est pair"
        sinon
            afficher "le nombre n'est pas pair"
        finsi    
fin

fonction moyenneDe3 (nombre1,nombre2,nombre3)
variable
    resultat:integer 
debut
    resultat <- nombre1 + nombre2 + nombre3
    resultat <- resultat/3
    afficher resultat 
fin

//Premiere
fonction verificationID (age , sexe)
    debut
        si (age < 18 )alors
            afficher "trop jeune"
            si (sexe = true )alors
                afficher "Homme"
            sinon 
                afficher "Femme"
        sinon
            si (age > 30 )
                afficher "trop vieux"
                si (sexe = true )alors
                afficher "Homme"
            sinon 
                afficher "Femme"
        sinon
            afficher "Tu peux entrer" , sexe
        finsi
    fin

//Deuxieme
fonction verificationID2 (age, sexe)
debut
    si(age < 18 )
        afficher "trop jeune"
    sinonsi
        afficher "trop vieux"
    finsi
    si (sexe)
        afficher "homme"
    sinonsi 
        afficher "femme"
    finsi
fin

// Ma fonction
fonction divisiblePar5 (nombre)
    debut
        si (nombre mod 5 = 0 )alors
            retourner true
        sinon
            retourner false
    fin

//Son utilisation dans un contexte d'algorithme
algorithme main
variables
nombre:integer
debut
    saisir nombre 
    si divisiblePar5 (nombre) alors
        afficher nombre, "est divible par 5"
    finsi
fin

//Ma fonction 

fonction returnStringHello (nom, prenom)
    debut
        retourner "Bonjour",nom , " ", prenom
    fin

//Utilisation fonction

algorithme printNomPrenom
variables
nom:string
prenom:string

debut
    saisir nom
    saisir prenom
    afficher returnStringHello(nom, prenom)
fin

// Exerice final fonction
fonction afficherMenu
debut
    monMenu <- "1/ Factorielle"
    monMenu <- monMenu + "2/Somme"
    monMenu <- monMenu + "0/Quitter"
    afficher monMenu
fin

fonction factorielNombre (nombreFac)
    variables
    resultat:integer

    debut
    resultat <- 1
        pour i de 1 à nombreFac pas de 1 faire
            resultat <- resultat * i
        finfaire 
        retourner resultat
    fin

fonction sommeNombre (nombreSom)
    variables 
    resultat:integer
    
    debut
    resultat <- 0
        pour i de 1 à nombreSom pas de 1 faire
            resultat <- resultat + i
        finfaire
        retourner resultat
    fin

// Algorithme exerice final

algorithme finalFonction 
variable
    choix:integer
    nombreUser:integer
    resultat:integer
    utilisateurDemande:boolean

debut

    faire

        afficherMenu

        afficher "Choisissez votre programme"
        saisir choix

        afficher "Veuillez saisir un nombre"
        saisir nombreUser

        selon choix
            cas 1 : resultat<- nombreFactorielle(nombreUser)
            cas 2 : resultat <- sommeNombre(nombreUser)
            cas 3 : afficher "Au revoir"
            autrement: afficher "je n'ai pas compris votre choix"
        finselon
        afficher "le resultat est", resultat
    tant que choix != 0
fin


--------------------------- LES TABLEAUX --------------------------
algorithme arrayStudy

variable 
t[n]:tableau entier

debut

t[0] <- 4
t[1] <- 5
t[2] <- 6
t[3] <- 7
afficher t[2] //resultat 6

//boucle for pour les array 
pour i de 0 à taille(t)-1 pas de 1 faire
    afficher t[i]
finfaire
fin

algorithme arrayExercice1

variable 
t[n]:tableau entier

debut
    //solution non optimisé 
    t[0] <- 1
    t[1] <- 2
    t[2] <- 3
    t[3] <- 4
    t[4] <- 5
    t[5] <- 6

    //solution optimisé 
    pour i de 0 à 5 pas de 1 faire
        t[i] <- i + 1
    finfaire
    
    //initialiser un tableau exemple (en programmation)
    t <- [1,2,3,4,5,6]
fin

algorithme exericeArray

variable
note:integer
t[n]:tableau entier
debut

    //Sans la fonction
    note <- 0
    pour i de 0 à 3 pas de 1 faire
        t[i] <- aleatoire (0,20)
        note <- note + t[i]
    finfaire

    note <- note / taille(t) 
    afficher note

    //Avec la fonction
    fonction calcAverageArray (tab)
    variable
    note:integer
    debut
        note <- 0 
        pour i de 0 à taille(tab)-1 pas de 1 faire
            note <- note + taille(tab)
        finfaire
        note <- note / taille(tab)
        retourner note
    fin

    // algorithme avec la fonction
    variable 
    tab[n]:tableau entier

    debut
        pour i de 0 à 3 pas de 1 faire
            t[i] <- aleatoire(0,20)
        finfaire
        afficher calcAverageArray(t)
    fin
fin


//Exercice3
algorithme exerciceAlgo3
variable
t[n]:tableau string
char:string
choix:integer

debut
    choix <- 1
    Afficher "Entrer une lettre"
    faire
    saisir char 
    t[n] <- char
    afficher "Voulez vous rajouter une lettre"
    selon choix
        cas 1  <- "Oui"
        cas 2 <- "Non"
    finselon
    tant que choix = 1 
fin

//Exercice3 correction

algorithme exercice3
variable 
lettre[a]:tableau string
quitter:string
cpt<- entier

debut
    cpt <- 0
    faire 
        saisir lettre[cpt]
        cpt ++ 
        afficher "voulez vous continuez ?"
        saisir quitter
    tant que quitter != "N"
fin

fonction displayArray (tab)
    debut 
        pour cpt de 0 à taille (tab)-1 pas de 1 faire
            afficher tab[cpt]
        finfaire
    fin

algorithme exo4
variable
t1[n]:tableau entier

debut
    t1[n]<- [1,2,3,4,5,6]
    displayArray(t1[n])
fin

fonction calcArray (array)
    variables
    resultat:integer
    resultat<-0
    debut
        pour i de 0 à taille (array)-1 pas de 1 faire
            si (array[i] < 10) alors
                resultat <- resultat + array[i] 
            sinon
                afficher array[i] "superieur"
            finsi
            retourner resultat
        finfaire
    fin

algo exo5
variables
tab[n]:tableau entier

debut
    pour i de 0 à 10 pas de 1 faire
        tab[i]<- aleatoire(1,50)
    finfaire
fin

afficher calcArray(tab) 


fonction averageArray (tab1, tab2)
    variables
    resultatTab1
    resultatTab2
    averageTab1
    averageTab2

    debut
        pour i de 0 à taille (tab1)-1 pas de 1 faire
            resultatTab1 <- resultatTab1 + tab1[i]
        finfaire
        pour i de 0 à taille(tab2)-1 pas de 1 faire
            resultatTab2 <- resultatTab2 +tab2[i] 
        finfaire

        averageTab1 <- resultatTab1 / taille (tab1)
        averageTab2 <- resultatTab2 / taille (tab2)

        si (averageTab1 > averageTab2) alors
            retourner "true"
        sinon
            retourner "false"
        finsi
    fin

fonction paramsArray (tab1)
    variables
    supTab[n]:tableau entier
    infTab[n]: tableau entier


    pour i de 0 à taille (tab1)-1 pas de 1 faire
        si (tab1[i] > 10 ) alors
            supTab <- supTab[i] + tab[i]
        sinon
            infTab <- infTab[i] + tab[i]
        finsi
        retourner supTab
        retourner infTab
    finfaire


//Fonction permettant a l'utilisateur de saisir un nombre de mot , ceci seront rentré dans un tableau
fonction enterWord (words:integer)
    variable
    mot[n]:tableau string

    debut
        pour i de 0 à words - 1 pas de 1 faire
            saisir mots[i]
        finfaire
        retourner mots
    fin


// Fonction qui permet de savoir si un tableau passé en parametre contient que des valeurs paires
fonction trueOrFalse (tab)
    pour i de 0 à taille (tab) -1 pas de 1 faire
        si ((tab[i] % 2) != 0) alors
            retourner false
        finsi 
    finfaire
    returner true



/* Fonction qui prend en paramètre un tableau et un chiffre . Si une valeur du tableau est superieur à 20 celle ci sera multiplié par le chiffre entré en 2eme
paramètres puis chaque valeur testé sera additionné après avoir été multiplié  */

fonction arrayVsNumber (arr, chiffre)
    variables
    value1:integer
    resultat:integer

    value1 <- 0
    resultat <- 0

    pour i de 0 à taille (arr)-1 pas de 1 faire
        si (arr[i] > 20) alors
            value1 <- 0
            value1 <- arr[i] * chiffre
            resultat <- resultat + value1
        finsi
    finfaire
    retourner resultat

//refactoring

fonction arrayVsNumber (arr, chiffre)
    variables
    resultat:integer

    debut
    resultat <- 0
    pour i de 0 à taille (arr)-1 pas de 1 faire
        si (arr[i] > 20) alors
            resultat <- resultat + arr[i] * chiffre
        finsi
    finfaire
    retourner resultat
    fin

//Auto Evaluation

// Exercice 2

fonction gauche (milo)
    tournerGauche
    avancer
    tournerGauche
    pour i de 1 à 4 pas de 1 faire
        avancer
    finfaire

fonction droite (milo)
    tournerDroite
    avancer
    tournerDroite
    pour i de 1 à 4 pas de 1 faire
        avancer
    finfaire


algorithme exercicePt2 

pour i de 1 à 4 pas de 1 faire
    avancer
finfaire
pour i de 1 à 2 pas de 1 faire
    fonction droite 
    fonction gauche
    fonction droite
    fonction gauche 
finfaire
fonction droite
avancer

//Exercice 3 
//Trouver les erreurs 
Milo avance 3 fois au lieu de 2

//FIN


// ----------------- Algorithme de tri --------------------

//Le tri d'insertion
fonction triInsert(tab:entier)
variabloes 
valeur : entier
cpt: entier

debut
    pour i de 1 à taille(tab)-1 pas de 1 faire
        valeur <- tab[i]
        cpt <- i
        tant que (cpt > 0 et tab[cpt -1]>valeur) faire
            tab[cpt]<-tab[cpt -1]
            cpt <- cpt -1
        finfaire
        tab[cpt]<- valeur 
    finfaire
fin

//Le tri par selection
fonction triSelect(tab:entier)
variables
    min:entier
    tmp:entier

    debut
        pour i de 0 à taille(tab)-2 pas de 1 faire
            min <- i
                pour j de i+1 à taille(tab)-1 pas de 1 faire
                    si tab[j] < tab[min] alors
                        min <- j
                    finsi
                finfaire
                si min != i alors 
                    tmp = tab[i]
                    tab[i]= tab[min]
                    tab[min]= tmp
                finsi
        finfaire
    fin

//Le tri a bulles 

fonction triBulle(tab:entier)
variables
    tmp:entier

debut
    pour i de taille(tab)-1 à 1 pas de 1 faire
        pour j de 0 à i-1 pas de 1 faire
            si tab[j + 1]<tab[j]alors
                tmp = tab[j+1]
                tab[j+1] = tab[j]
                tab[j] = tmp
            finsi
        finfaire
    finfaire
fin

//Recherche Dichotomique 
//Permet d'optimiser la recherche dans un tableau trié , pour eviter de parcourir tout le tableau pour trouver une valeur 
//Definiton fonction recursive : fonction qui se rapellle elle même mais qui a une conditon d'arret 

fonction recherche(elementRecherche:entier, tab:tableau entier)
variables
    milieu:entier
debut
    milieu<-taille(tab/2)
    si tab[milieu] = elementRecherche alors
        retourner milieu //condition d'arrêt 
    sinon
        si tab[milieu]< elementRecherche alors
            // recherche partie inferieure
            //utilisation d'une fonction recursive (fonction qui se rapelle elle même)
            retourne recherche(elementRecherche, tab[0:milieu]) // on suppose que tab[0:milieu] ne prend que la partie inferieur ( de 0 au milieu du tab)
        sinon
            // rechercher partie superieure
            retourne recherche(elementRecherche, tab[milieu:taille(tab)-1]) // même chose mais pour la partie superieur 
        finsi
    finsi
fin

//Exercice 
fonction factrorielle (nbr:entier)
debut
    si (nbr = 1)   alors
        retourne 1
    sinon 
        retourne nbr * factorielle (nbr - 1)
    finsi
fin



